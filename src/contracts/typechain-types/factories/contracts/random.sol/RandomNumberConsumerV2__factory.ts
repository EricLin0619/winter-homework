/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RandomNumberConsumerV2,
  RandomNumberConsumerV2Interface,
} from "../../../contracts/Random.sol/RandomNumberConsumerV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "vrfCoordinator",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "keyHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "ReturnedRandomness",
    type: "event",
  },
  {
    inputs: [],
    name: "getNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61010060405234801561001157600080fd5b5060405161064238038061064283398101604081905261003091610069565b6001600160a01b03909116608081905260a05260e052600280546001600160a01b031916331790556001600160401b031660c0526100c4565b60008060006060848603121561007e57600080fd5b83516001600160401b038116811461009557600080fd5b60208501519093506001600160a01b03811681146100b257600080fd5b80925050604084015190509250925092565b60805160a05160c05160e051610540610102600039600061014a01526000610179015260006101c401526000818160ba015260fc01526105406000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631fe543e31461005c578063e0c8628914610071578063e89e106a1461008b578063f2c9ecd814610094578063f6eaffc81461009c575b600080fd5b61006f61006a366004610392565b6100af565b005b61007961013b565b60405190815260200160405180910390f35b61007960015481565b61007961023c565b6100796100aa36600461045c565b61027a565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461012d5760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b610137828261029b565b5050565b6040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015260036044820152620186a060648201526001608482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a4016020604051808303816000875af115801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190610475565b600181905592915050565b600061024661013b565b5060006103e96000808154811061025f5761025f61048e565b906000526020600020015461027491906104a4565b92915050565b6000818154811061028a57600080fd5b600091825260209091200154905081565b80516102ae90600090602084019061031c565b50806000815181106102c2576102c261048e565b602002602001015160036000848152602001908152602001600020819055507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e8160405161031091906104c6565b60405180910390a15050565b828054828255906000526020600020908101928215610357579160200282015b8281111561035757825182559160200191906001019061033c565b50610363929150610367565b5090565b5b808211156103635760008155600101610368565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156103a557600080fd5b8235915060208084013567ffffffffffffffff808211156103c557600080fd5b818601915086601f8301126103d957600080fd5b8135818111156103eb576103eb61037c565b8060051b604051601f19603f830116810181811085821117156104105761041061037c565b60405291825284820192508381018501918983111561042e57600080fd5b938501935b8285101561044c57843584529385019392850192610433565b8096505050505050509250929050565b60006020828403121561046e57600080fd5b5035919050565b60006020828403121561048757600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000826104c157634e487b7160e01b600052601260045260246000fd5b500690565b6020808252825182820181905260009190848201906040850190845b818110156104fe578351835292840192918401916001016104e2565b5090969550505050505056fea264697066735822122077f752146f9d77d13a233935a3fdbae1339a1e69987bc5c8658fee6e1b534e1c64736f6c63430008140033";

type RandomNumberConsumerV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RandomNumberConsumerV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RandomNumberConsumerV2__factory extends ContractFactory {
  constructor(...args: RandomNumberConsumerV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    subscriptionId: BigNumberish,
    vrfCoordinator: AddressLike,
    keyHash: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      subscriptionId,
      vrfCoordinator,
      keyHash,
      overrides || {}
    );
  }
  override deploy(
    subscriptionId: BigNumberish,
    vrfCoordinator: AddressLike,
    keyHash: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      subscriptionId,
      vrfCoordinator,
      keyHash,
      overrides || {}
    ) as Promise<
      RandomNumberConsumerV2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RandomNumberConsumerV2__factory {
    return super.connect(runner) as RandomNumberConsumerV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RandomNumberConsumerV2Interface {
    return new Interface(_abi) as RandomNumberConsumerV2Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RandomNumberConsumerV2 {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RandomNumberConsumerV2;
  }
}
